html,
body {
    margin: 0;
    padding: 0;
}

.grid-container {
    height: 100vh;
    width: 100vw;
    /* your properties here */
    /* Any time we want to implement a CSS grid, we must define it within the display property of the parent element. This causes the browser to interpret all child elements of the parent to align to a grid. Child elements do not need to have any height or width settings; they will stretch to fill the space of their cells automatically. */
    display: grid;
    grid-template: 1fr 1fr 1fr 1fr / 1fr 1fr 1fr;
    grid-gap: 5px
}

.grid-item {
    background-color: grey;
    border: 1px solid black;
}


/* add the .bigItem class */

.bigItem {
    /* grid-column-start: 2;
    grid-column-end: 4;
    grid-row-start: 2;
    grid-row-end: 4; */
    /* grid-area: <grid-row-start> / <grid-column-start> / <grid-row-end> / <grid-column-end> */
    /*
    grid-row: 2/4;
    grid-column: 2/4; */
    grid-area: 2 / 2 / 4 / 4;
    height: 50%;
    width: 50%;
    justify-self: center;
}


/* Just to recap, to get a grid up and running on a webpage, at minimum, you will need one 'container' element. This element should display set to grid in its styling.

Any child elements of this container will fit evenly into the rows of one column. To make things a little more interesting, we need to use properties like grid-template on the container element, arranging content into however many rows and columns we like.

To get fine tuned with specific content, we can apply styling to child elements, overriding template rules. */